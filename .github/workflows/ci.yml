name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  lint:
    name: Shell Lint & Syntax
    runs-on: ubuntu-latest
    env:
      HUSKY: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install shellcheck and shfmt
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          curl -sSLo shfmt https://github.com/mvdan/sh/releases/latest/download/shfmt_v3.10.0_linux_amd64
          chmod +x shfmt
          sudo mv shfmt /usr/local/bin/

      - name: Bash syntax check
        run: |
          set -e
          find . -type f -name '*.sh' -print0 | xargs -0 -I{} bash -n {}

      - name: ShellCheck
        run: |
          set -e
          shellcheck -S warning $(git ls-files '**/*.sh') || true

      - name: shfmt (diff only)
        run: |
          set -e
          shfmt -d -i 4 -ci -sr . || true

      - name: Install Bats
        run: |
          git clone https://github.com/bats-core/bats-core.git /tmp/bats
          sudo /tmp/bats/install.sh /usr/local

      - name: Smoke test
        run: |
          bash tests/smoke.sh

      - name: Run Bats tests
        run: |
          bats tests/bats/test_core.bats
          bats tests/bats/test_ssh_module.bats
          bats tests/bats/test_integration.bats

  meta:
    name: Metadata Sanity
    runs-on: ubuntu-latest
    env:
      HUSKY: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure executable bits on scripts
        run: |
          chmod +x *.sh || true
          chmod +x modules/*.sh || true
          chmod +x *.ps1 || true

  notify-failure:
    name: Create Issue on CI Failure
    needs: [lint, meta]
    if: failure() && github.event.pull_request == null && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Create failed build issue
        uses: jayqi/failed-build-issue-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          title-template: "üö® CI Pipeline Failed - {{runNumber}}"
          body-template: |
            ## CI Pipeline Failure Report

            **Workflow:** {{workflow}}
            **Run ID:** {{runId}}
            **Run Number:** {{runNumber}}
            **Branch:** {{ref}}
            **Commit:** {{sha}}
            **Actor:** {{actor}}
            **Repository:** {{repository}}
            **Event:** {{eventName}}

            ### Failure Details
            One or more jobs in the CI pipeline have failed. Please check the [workflow run]({{workflowRunUrl}}) for detailed error information.

            ### Affected Jobs
            - Shell Lint & Syntax
            - Metadata Sanity

            ### Next Steps
            1. Review the failed job logs in the [Actions tab]({{workflowRunUrl}})
            2. Fix any syntax errors, linting issues, or test failures
            3. Push the fixes to trigger a new CI run

            ### Debugging Tips
            - **Syntax errors:** Check `bash -n` output for shell syntax issues
            - **ShellCheck:** Review shellcheck warnings for best practices
            - **Smoke test:** Verify all required files are present and executable

            ---
            *This issue was automatically created by the CI failure detection system.*

  # Optional job to test installation in a container environment
  container-test:
    name: Container Installation Test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[test-container]')
    env:
      HUSKY: 0
    container:
      image: ubuntu:22.04
    steps:
      - name: Setup container environment
        run: |
          apt-get update
          apt-get install -y curl git bash wget

      - name: Checkout
        uses: actions/checkout@v4

      - name: Test installation script
        run: |
          echo "Testing installation in container environment..."
          # Simulate Termux-like environment
          export HOME=/tmp/test-home
          mkdir -p "$HOME"
          cd "$HOME"

          # Test the install script
          bash -c "$(curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/install.sh)" || true

          # Check if basic files were created
          if [ -d "termux-dev-nvim-agents" ]; then
            echo "‚úÖ Installation directory created"
            ls -la termux-dev-nvim-agents/
          else
            echo "‚ùå Installation failed"
            exit 1
          fi
# ====================================
# ZSH Configuration for Termux AI Development
# Classic Style - Clean and Professional
# ====================================

# Oh My Zsh path
export ZSH="$HOME/.oh-my-zsh"

# Tema - Powerlevel10k
ZSH_THEME="powerlevel10k/powerlevel10k"

# Plugins esenciales
plugins=(
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
    zsh-completions
    history-substring-search
    colored-man-pages
    extract
    z
    node
    npm
    python
    pip
    docker
)

# Cargar Oh My Zsh
source $ZSH/oh-my-zsh.sh

# ====================================
# CONFIGURACIÓN DE ENTORNO
# ====================================

# Variables de entorno
export EDITOR='nvim'
export VISUAL='nvim'
export BROWSER='termux-open'
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Configuración de Node.js
export NODE_OPTIONS="--max-old-space-size=4096"

# Configuración de Python
export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"

# Path personalizado
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"

# ====================================
# ALIASES Y FUNCIONES
# ====================================

# Navegación mejorada
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'
alias -- -='cd -'

# Listado mejorado (usa exa si está disponible, sino ls)
if command -v exa >/dev/null 2>&1; then
    alias ls='exa --icons --group-directories-first'
    alias ll='exa -la --icons --group-directories-first'
    alias la='exa -a --icons --group-directories-first'
    alias lt='exa --tree --level=2 --icons'
    alias l='exa --icons --group-directories-first'
else
    alias ll='ls -la'
    alias la='ls -A'
    alias l='ls -CF'
fi

# Git aliases mejorados
alias g='git'
alias gs='git status -sb'
alias ga='git add'
alias gaa='git add --all'
alias gc='git commit -v'
alias gcm='git commit -m'
alias gco='git checkout'
alias gb='git branch'
alias gp='git push'
alias gl='git pull'
alias glog='git log --oneline --graph --decorate --all'
alias gd='git diff'
alias gds='git diff --staged'

# Herramientas modernas (con fallbacks)
if command -v bat >/dev/null 2>&1; then
    alias cat='bat --paging=never'
fi
if command -v fd >/dev/null 2>&1; then
    alias find='fd'
fi
if command -v rg >/dev/null 2>&1; then
    alias grep='rg'
fi
if command -v dust >/dev/null 2>&1; then
    alias du='dust'
fi
if command -v duf >/dev/null 2>&1; then
    alias df='duf'
fi
if command -v procs >/dev/null 2>&1; then
    alias ps='procs'
fi
if command -v htop >/dev/null 2>&1; then
    alias top='htop'
fi

# Termux específicos
alias apt='pkg'
alias install='pkg install'
alias search='pkg search'
alias update='pkg update && pkg upgrade'
alias python='python3'
alias pip='pip3'

# Desarrollo básico
alias vi='nvim'
alias vim='nvim'
alias code='nvim'
alias serve='python3 -m http.server'
alias json='jq .'
alias weather='curl wttr.in'

# Docker (si está disponible)
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias di='docker images'

# ====================================
# FUNCIONES ÚTILES
# ====================================

# Crear directorio y navegar a él
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extraer archivos automáticamente
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Información del sistema
sysinfo() {
    echo -e "\n\033[1;34m=== System Information ===\033[0m"
    echo -e "\033[1;32mHostname:\033[0m $(hostname)"
    echo -e "\033[1;32mUptime:\033[0m $(uptime)"
    if command -v neofetch >/dev/null 2>&1; then
        neofetch --disable theme icons --ascii_distro off
    fi
}

# Actualización completa del sistema
sysupdate() {
    echo -e "\033[1;34m=== Updating System ===\033[0m"
    pkg update && pkg upgrade
    if command -v npm >/dev/null 2>&1; then
        echo -e "\033[1;34m=== Updating NPM packages ===\033[0m"
        npm update -g
    fi
    echo -e "\033[1;32mSystem updated!\033[0m"
}

# ====================================
# CONFIGURACIÓN DE HERRAMIENTAS
# ====================================

# Zoxide (mejor cd)
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# FZF configuración
if command -v fzf >/dev/null 2>&1; then
    if command -v fd >/dev/null 2>&1; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    fi
    export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# Autocompletado para zsh-completions
autoload -U compinit && compinit

# ====================================
# CONFIGURACIÓN DE IA (API KEYS)
# ====================================

# Cargar variables de entorno para APIs de IA
if [[ -f "$HOME/.ai-env" ]]; then
    source "$HOME/.ai-env"
fi

# Start AI agent with ':' if available
if [[ -x "$HOME/bin/colon" ]]; then
    alias :='$HOME/bin/colon'
fi

# ====================================
# CONFIGURACIÓN FINAL
# ====================================

# Mostrar información útil al iniciar
if [[ -o interactive ]]; then
    echo -e "\033[1;36m╔══════════════════════════════════════════════════════════════════════╗\033[0m"
    echo -e "\033[1;36m║                    🚀 TERMUX AI READY 🎯                           ║\033[0m"
    echo -e "\033[1;36m╚══════════════════════════════════════════════════════════════════════╝\033[0m"
    echo -e "\033[1;33m💡 Tip: Type 'sysinfo' for system info, 'sysupdate' to update all\033[0m"
    echo -e "\033[0;36m📝 Type 'nvim' to start coding with AI assistance\033[0m"
fi

# Cargar configuración local si existe
if [[ -f "$HOME/.zshrc.local" ]]; then
    # shellcheck disable=SC1090
    source "$HOME/.zshrc.local"
fi

# Cargar configuración de Powerlevel10k - Classic Style
if [[ -f "$HOME/.config/zsh/p10k-classic.zsh" ]]; then
    source "$HOME/.config/zsh/p10k-classic.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
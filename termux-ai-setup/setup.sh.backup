#!/bin/bash

# ====================================
# TERMUX AI DEVELOPMENT SETUP
# Modular system to configure Termux with AI
# Repository: https://github.com/iberi22/termux-dev-nvim-agents
# Quick install: wget -qO- https://raw.githubusercontent.com/iberi22/termux-dev-nvim-agents/main/termux-ai-setup/install.sh | bash
# ====================================

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Determine script location with graceful fallbacks
DEFAULT_INSTALL_DIR="$HOME/termux-ai-setup"

resolve_script_dir() {
    local source="${BASH_SOURCE[0]}"

    if [[ -z "$source" || "$source" == "bash" || "$source" == "-" || "$source" =~ ^/dev/fd ]]; then
        printf '%s\n' "$PWD"
        return
    fi

    while [[ -h "$source" ]]; do
        local dir
        dir="$(cd -P "$(dirname "$source")" && pwd)"
        if command -v readlink >/dev/null 2>&1; then
            source="$(readlink "$source")"
        else
            break
        fi
        [[ "$source" != /* ]] && source="$dir/$source"
    done

    (cd -P "$(dirname "$source")" && pwd)
}

SCRIPT_DIR="$(resolve_script_dir)"
if [[ ! -d "$SCRIPT_DIR" && -d "$DEFAULT_INSTALL_DIR" ]]; then
    SCRIPT_DIR="$DEFAULT_INSTALL_DIR"
fi

if [[ -d "$DEFAULT_INSTALL_DIR/modules" && ! -d "$SCRIPT_DIR/modules" ]]; then
    SCRIPT_DIR="$DEFAULT_INSTALL_DIR"
fi

MODULES_DIR="${SCRIPT_DIR}/modules"
CONFIG_DIR="${SCRIPT_DIR}/config"
LOG_FILE="${SCRIPT_DIR}/setup.log"

if [[ -d "$SCRIPT_DIR" ]]; then
    cd "$SCRIPT_DIR"
fi

# Function for logging
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to show banner
show_banner() {
    clear
    echo -e "${PURPLE}"
    echo "=============================================="
    echo "           TERMUX AI SETUP v2.0"
    echo "   Automated System for AI Development in Termux"
    echo "=============================================="
    echo -e "${NC}
"
}


# Function to check prerequisites
check_prerequisites() {
    echo -e "${BLUE}[INFO] Checking prerequisites...${NC}"

    # Verify we're running in Termux
    if [[ ! -d "/data/data/com.termux" ]]; then
        echo -e "${RED}[ERROR] This script must be run in Termux${NC}"
        exit 1
    fi

    # Verify internet connection
    if ! ping -c 1 google.com &> /dev/null; then
        echo -e "${RED}[ERROR] Internet connection required${NC}"
        exit 1
    fi

    # Attempt to switch to the default install directory if modules are missing but the repo exists there
    if [[ ! -d "$MODULES_DIR" && -d "$DEFAULT_INSTALL_DIR/modules" ]]; then
        echo -e "${YELLOW}[!] Modules directory missing in current path.${NC}"
        echo -e "${YELLOW}[>] Switching to: $DEFAULT_INSTALL_DIR${NC}"
        SCRIPT_DIR="$DEFAULT_INSTALL_DIR"
        MODULES_DIR="${SCRIPT_DIR}/modules"
        CONFIG_DIR="${SCRIPT_DIR}/config"
        LOG_FILE="${SCRIPT_DIR}/setup.log"
        cd "$SCRIPT_DIR"
    fi

    # Verify we have the correct directory structure
    if [[ ! -d "$MODULES_DIR" ]]; then
        echo -e "${RED}[x] Modules directory not found: $MODULES_DIR${NC}"
        echo -e "${YELLOW}[!] Please ensure you're running this script from the correct location.${NC}"

        # Check if we're in the wrong directory but termux-ai-setup exists
        if [[ -d "$DEFAULT_INSTALL_DIR" && "$PWD" != "$DEFAULT_INSTALL_DIR" ]]; then
            echo -e "${CYAN}[i] Found installation at: $DEFAULT_INSTALL_DIR${NC}"
            echo -e "${CYAN}[i] Please run: cd ~/termux-ai-setup && ./setup.sh${NC}"
            exit 1
        fi

        echo -e "${YELLOW}[!] Try re-running the installer:${NC}"
        echo -e "${CYAN}   wget -qO- https://raw.githubusercontent.com/iberi22/termux-dev-nvim-agents/main/termux-ai-setup/install.sh | bash${NC}"
        exit 1
    fi
    # Verify essential modules exist
    local essential_modules=("00-base-packages.sh" "test-installation.sh")
    for module in "${essential_modules[@]}"; do
        if [[ ! -f "$MODULES_DIR/$module" ]]; then
            echo -e "${RED}âŒ Essential module missing: $module${NC}"
            echo -e "${YELLOW}ðŸ’¡ Please re-run the installer to restore missing files.${NC}"
            exit 1
        fi
    done

    echo -e "${GREEN}âœ… Prerequisites verified${NC}"
}

# Function to show main menu
show_main_menu() {
    echo -e "${CYAN}â”Œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”${NC}"
    echo -e "${CYAN}â”‚                  MAIN MENU                      â”‚${NC}"
    echo -e "${CYAN}â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤${NC}"
    echo -e "${WHITE}  1. Install Base Packages${NC}"
    echo -e "${WHITE}  2. Configure Zsh + Oh My Zsh${NC}"
    echo -e "${WHITE}  3. Install and Configure Neovim${NC}"
    echo -e "${WHITE}  4. Configure SSH for GitHub${NC}"
    echo -e "${WHITE}  5. Enable Local SSH/SFTP Access${NC}"
    echo -e "${WHITE}  6. Configure AI Integration${NC}"
    echo -e "${WHITE}  7. Configure AI Workflows${NC}"
    echo -e "${WHITE}  8. Install Nerd Fonts + Set Font${NC}"
    echo -e "${WHITE}  9. Complete Installation (Automatic)${NC}"
    echo -e "${WHITE} 10. Run Installation Tests${NC}"
    echo -e "${WHITE} 11. Clean and Reinstall from Scratch${NC}"
    echo -e "${WHITE}  0. Exit${NC}"
    echo -e "\n${YELLOW}Select an option [0-11]:${NC} "
}

# Function to run module with error handling
run_module() {
    local module_name="$1"
    local module_path="${MODULES_DIR}/${module_name}.sh"

    echo -e "${BLUE}[RUN] Preparing to run: ${module_name}${NC}"
    echo -e "${CYAN}[INFO] Looking for module at: ${module_path}${NC}"
    echo -e "${CYAN}[INFO] Current directory: ${PWD}${NC}"
    echo -e "${CYAN}[INFO] Script directory: ${SCRIPT_DIR}${NC}"
    echo -e "${CYAN}[INFO] Modules directory: ${MODULES_DIR}${NC}"

    if [[ ! -f "$module_path" ]]; then
        echo -e "${RED}[ERROR] Module not found: ${module_path}${NC}"

        if [[ -d "$MODULES_DIR" ]]; then
            echo -e "${CYAN}[INFO] Available modules in ${MODULES_DIR}:${NC}"
            ls -la "$MODULES_DIR"/*.sh 2>/dev/null || echo -e "${YELLOW}[WARN] No .sh files found${NC}"
        else
            echo -e "${RED}[ERROR] Modules directory does not exist: ${MODULES_DIR}${NC}"
        fi

        echo -e "${YELLOW}[HINT] Solutions:${NC}"
        echo -e "${CYAN}  1. Ensure you're in the right directory: cd ~/termux-ai-setup${NC}"
        echo -e "${CYAN}  2. Re-run the installer: wget -qO- https://raw.githubusercontent.com/iberi22/termux-dev-nvim-agents/main/termux-ai-setup/install.sh | bash${NC}"
        return 1
    fi

    if [[ ! -x "$module_path" ]]; then
        echo -e "${YELLOW}[WARN] Making ${module_name} executable...${NC}"
        chmod +x "$module_path"
    fi

    local auto_flag="${TERMUX_AI_AUTO:-}"
    local exit_code=0

    if [[ -n "$auto_flag" ]]; then
        if ! TERMUX_AI_AUTO="$auto_flag" bash "$module_path"; then
            exit_code=$?
        fi
    else
        if ! bash "$module_path"; then
            exit_code=$?
        fi
    fi

    if [[ $exit_code -eq 0 ]]; then
        echo -e "${GREEN}[OK] ${module_name} completed successfully${NC}"
        log "Module completed: ${module_name}"
        return 0
    else
        echo -e "${RED}[ERROR] Error in ${module_name} (exit code: ${exit_code})${NC}"
        log "Error in module: ${module_name} (exit code: ${exit_code})"
        return 1
    fi
}


# Function to request Gemini API key
setup_gemini_api() {
    if [[ -z "${GEMINI_API_KEY:-}" ]]; then
        echo -e "${YELLOW}ðŸ”‘ Gemini API Key Configuration${NC}"
        echo -e "${CYAN}To get personalized AI recommendations during installation${NC}"
        echo -e "${CYAN}you need a Google Gemini API key.${NC}\n"
        echo -e "${CYAN}Get your API key at: https://aistudio.google.com/app/apikey${NC}\n"

        read -p "Enter your Gemini API key (or press Enter to continue without AI): " api_key

        if [[ -n "$api_key" ]]; then
            echo "export GEMINI_API_KEY='$api_key'" >> ~/.bashrc
            echo "export GEMINI_API_KEY='$api_key'" >> ~/.zshrc 2>/dev/null || true
            export GEMINI_API_KEY="$api_key"
            echo -e "${GREEN}âœ… API key configured correctly${NC}"
        else
            echo -e "${YELLOW}âš ï¸  Continuing without AI integration${NC}"
        fi
    else
        echo -e "${GREEN}âœ… Gemini API key already configured${NC}"
    fi
}

# Function for complete installation
full_installation() {
    echo -e "${BLUE}[AUTO] Starting complete installation...${NC}"

    local modules=(
        "00-base-packages"
        "01-zsh-setup"
        "02-neovim-setup"
        "05-ssh-setup"
        "07-local-ssh-server"
        "03-ai-integration"
        "04-workflows-setup"
        "06-fonts-setup"  # Set FiraCode Nerd Font Mono by default
    )

    setup_gemini_api

    local previous_auto="${TERMUX_AI_AUTO:-}"
    export TERMUX_AI_AUTO=1
    local install_status=0

    for module in "${modules[@]}"; do
        if ! run_module "$module"; then
            echo -e "${RED}[ERROR] Installation interrupted at: ${module}${NC}"
            read -p "Do you want to continue with the next module? (y/N): " continue_install
            if [[ ! "$continue_install" =~ ^[Yy]$ ]]; then
                install_status=1
                break
            fi
        fi
        echo -e "${CYAN}---------------------------------------------${NC}"
    done

    if [[ -n "$previous_auto" ]]; then
        export TERMUX_AI_AUTO="$previous_auto"
    else
        unset TERMUX_AI_AUTO
    fi

    if (( install_status != 0 )); then
        return "$install_status"
    fi

    echo -e "${GREEN}[DONE] Complete installation finished!${NC}"
    echo -e "${CYAN}[INFO] Restarting terminal...${NC}"

    # Reload configuration
    source ~/.bashrc 2>/dev/null || true
    exec "$SHELL" || true
}

# Main function
main() {
    show_banner
    check_prerequisites

    # Create log file
    log "Starting Termux AI Setup"

    # Check if running in automatic mode
    if [[ "${1:-}" == "auto" ]]; then
        echo -e "${BLUE}ðŸ¤– Running in automatic mode...${NC}"
        full_installation
        exit $?
    fi

    while true; do
        show_main_menu
        read -r choice

        case $choice in
            1)
                run_module "00-base-packages"
                ;;
            2)
                run_module "01-zsh-setup"
                ;;
            3)
                run_module "02-neovim-setup"
                ;;
            4)
                run_module "05-ssh-setup"
                ;;
            5)
                run_module "07-local-ssh-server"
                ;;
            6)
                setup_gemini_api
                run_module "03-ai-integration"
                ;;
            7)
                run_module "04-workflows-setup"
                ;;
            8)
                # Fonts menu: allow user to select font interactively
                if [[ -f "${MODULES_DIR}/06-fonts-setup.sh" ]]; then
                    if bash "${MODULES_DIR}/06-fonts-setup.sh" menu; then
                        echo -e "${GREEN}[OK] Font configured successfully${NC}"
                    else
                        echo -e "${YELLOW}[WARN] Font configuration skipped or failed${NC}"
                    fi
                else
                    echo -e "${RED}[ERR] Fonts module not found${NC}"
                    echo -e "${YELLOW}[HINT] Re-run the installer to download missing modules:${NC}"
                    echo -e "${CYAN}   wget -qO- https://raw.githubusercontent.com/iberi22/termux-dev-nvim-agents/main/termux-ai-setup/install.sh | bash${NC}"
                fi
                ;;
            9)
                full_installation
                ;;
            10)
                run_module "test-installation"
                ;;
            11)
                run_module "99-clean-reset"
                ;;
            0)
                echo -e "${GREEN}Thank you for using Termux AI Setup!${NC}"
                log "Setup terminated by user"
                exit 0
                ;;
            *)
                echo -e "${RED}[ERROR] Invalid option. Select a number from 0-11.${NC}"
                sleep 2
                ;;
        esac

        echo -e "\n${YELLOW}Press Enter to continue...${NC}"
        read -r
    done
}

# Signal handling
trap 'echo -e "\n${RED}[ERROR] Installation interrupted${NC}"; exit 1' INT TERM

# Execute main function
main "$@"
